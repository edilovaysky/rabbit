/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/js_modules/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/js_modules/bars.js":
/*!*******************************!*\
  !*** ./js/js_modules/bars.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Bar;\r\nvar textureLoader = new THREE.TextureLoader();\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bar = function () {\r\n    var barMats = [\r\n      new THREE.MeshLambertMaterial({\r\n        color: 0xdeb56a,\r\n        side: THREE.DoubleSide\r\n      }),\r\n      new THREE.MeshLambertMaterial({\r\n        color: 0xdeb56a,\r\n        side: THREE.DoubleSide\r\n      }),\r\n      new THREE.MeshBasicMaterial({\r\n        map: textureLoader.load(\"../img/forward.png\")\r\n        //side: THREE.DoubleSide\r\n      }),\r\n      new THREE.MeshLambertMaterial({\r\n        color: 0xdeb56a,\r\n        side: THREE.DoubleSide\r\n      }),\r\n      new THREE.MeshLambertMaterial({\r\n        color: 0xdeb56a,\r\n        side: THREE.DoubleSide\r\n      }),\r\n      new THREE.MeshLambertMaterial({\r\n        color: 0xdeb56a,\r\n        side: THREE.DoubleSide\r\n      })\r\n    ];\r\n    var barMat = barMats; //new THREE.MeshFaceMaterial(barMats);\r\n    var barGeom = new THREE.BoxGeometry(40, 10, 15, 1);\r\n    this.barMesh = new THREE.Mesh(barGeom, barMat);\r\n    this.barMesh.position.set(-200, -0, 0);\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/bars.js?");

/***/ }),

/***/ "./js/js_modules/bridge.js":
/*!*********************************!*\
  !*** ./js/js_modules/bridge.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Bridge;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Bridge = function() {\r\n  this.bridgeMesh = new THREE.Group();\r\n  var woodMat = new THREE.MeshLambertMaterial({\r\n    color: 0x543b14,//0x3d2f19,//0xa98f78,\r\n    side: THREE.DoubleSide\r\n  });\r\n\r\n  //bridge - wood block\r\n  for (var i = 0; i < 15; i++) {\r\n    var blockGeom = new THREE.BoxGeometry(10, 3, 70);\r\n    var block = new THREE.Mesh(blockGeom, woodMat);\r\n    block.position.set(15 * i - 105, -13, 150);\r\n    block.castShadow = true;\r\n    //block.receiveShadow = true;\r\n    this.bridgeMesh.add(block);\r\n  }\r\n  //bridge - rail\r\n  var geometry_rail_v = new THREE.BoxGeometry(3, 20, 3);\r\n  this.rail_1 = new THREE.Mesh(geometry_rail_v, woodMat);\r\n  this.rail_1.position.set(-90, -6, 180);\r\n  this.rail_1.castShadow = true;\r\n  //customizeShadow(rail_1, 0.2);\r\n  this.bridgeMesh.add(this.rail_1);\r\n\r\n  var rail_2 = new THREE.Mesh(geometry_rail_v, woodMat);\r\n  rail_2.position.set(90, -6, 180);\r\n  rail_2.castShadow = true;\r\n  //customizeShadow(rail_2, 0.2);\r\n  this.bridgeMesh.add(rail_2);\r\n\r\n  var rail_3 = new THREE.Mesh(geometry_rail_v, woodMat);\r\n  rail_3.position.set(-90, -6, 120);\r\n  rail_3.castShadow = true;\r\n  //customizeShadow(rail_3, 0.2);\r\n  this.bridgeMesh.add(rail_3);\r\n\r\n  var rail_4 = new THREE.Mesh(geometry_rail_v, woodMat);\r\n  rail_4.position.set(90, -6, 120);\r\n  rail_4.castShadow = true;\r\n  //customizeShadow(rail_4, 0.2);\r\n  this.bridgeMesh.add(rail_4);\r\n\r\n  var geometry_rail_h = new THREE.BoxGeometry(220, 3, 3);\r\n  var rail_h1 = new THREE.Mesh(geometry_rail_h, woodMat);\r\n  rail_h1.position.set(0, 5, 180);\r\n  rail_h1.castShadow = true;\r\n  //customizeShadow(rail_h1, 0.2);\r\n  this.bridgeMesh.add(rail_h1);\r\n\r\n  var rail_h2 = new THREE.Mesh(geometry_rail_h, woodMat);\r\n  rail_h2.position.set(0, 5, 120);\r\n  rail_h2.castShadow = true;\r\n  //customizeShadow(rail_h2, 0.2);\r\n  this.bridgeMesh.add(rail_h2);\r\n  this.bridgeMesh.castShadow = true;\r\n  this.bridgeMesh.receiveShadow = true;\r\n  this.bridgeMesh.position.set(0, 0, 550);\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/bridge.js?");

/***/ }),

/***/ "./js/js_modules/carrot.js":
/*!*********************************!*\
  !*** ./js/js_modules/carrot.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Carrot;\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Carrot = function() {\r\n  this.carrotMesh = new THREE.Group();\r\n\r\n  var carrotMat = new THREE.MeshLambertMaterial({\r\n    color: 0xd9721e //0xdc5f45,//0xb43b29,//0xff5b49,\r\n  });\r\n\r\n  var leafMat = new THREE.MeshLambertMaterial({\r\n    color: 0x339e33 //0x7abf8e,\r\n  });\r\n\r\n  var bodyGeom = new THREE.CylinderGeometry(5, 3, 12, 4, 1); //5, 3, 10, 4, 1\r\n  bodyGeom.vertices[8].y += 2;\r\n  bodyGeom.vertices[9].y -= 3;\r\n\r\n  this.body = new THREE.Mesh(bodyGeom, carrotMat);\r\n\r\n  var leafGeom = new THREE.CubeGeometry(5, 10, 1, 1);\r\n  leafGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0, 5, 0));\r\n  leafGeom.vertices[2].x -= 1;\r\n  leafGeom.vertices[3].x -= 1;\r\n  leafGeom.vertices[6].x += 1;\r\n  leafGeom.vertices[7].x += 1;\r\n\r\n  this.leaf1 = new THREE.Mesh(leafGeom, leafMat);\r\n  this.leaf1.position.y = 7;\r\n  this.leaf1.rotation.z = 0.3;\r\n  this.leaf1.rotation.x = 0.2;\r\n\r\n  this.leaf2 = this.leaf1.clone();\r\n  this.leaf2.scale.set(1, 1.3, 1);\r\n  this.leaf2.position.y = 7;\r\n  this.leaf2.rotation.z = -0.3;\r\n  this.leaf2.rotation.x = -0.2;\r\n\r\n  this.carrotMesh.add(this.body);\r\n  this.carrotMesh.add(this.leaf1);\r\n  this.carrotMesh.add(this.leaf2);\r\n\r\n  this.body.traverse(function(object) {\r\n    if (object instanceof THREE.Mesh) {\r\n      object.castShadow = true;\r\n      object.receiveShadow = true;\r\n    }\r\n  });\r\n\r\n  this.carrotMesh.scale.set(2, 2, 2);\r\n  this.carrotMesh.position.set(-50, 0, 50);\r\n});\r\n\r\n\n\n//# sourceURL=webpack:///./js/js_modules/carrot.js?");

/***/ }),

/***/ "./js/js_modules/index.js":
/*!********************************!*\
  !*** ./js/js_modules/index.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _skybox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./skybox */ \"./js/js_modules/skybox.js\");\n/* harmony import */ var _scenefloor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scenefloor */ \"./js/js_modules/scenefloor.js\");\n/* harmony import */ var _carrot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./carrot */ \"./js/js_modules/carrot.js\");\n/* harmony import */ var _rabbit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rabbit */ \"./js/js_modules/rabbit.js\");\n/* harmony import */ var _bars__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bars */ \"./js/js_modules/bars.js\");\n//THREEJS RELATED VARIABLES\r\n\r\nvar scene,\r\n  camera,\r\n  controls,\r\n  fieldOfView,\r\n  aspectRatio,\r\n  nearPlane,\r\n  farPlane,\r\n  shadowLight,\r\n  backLight,\r\n  ambientLight,\r\n  light,\r\n  renderer,\r\n  container,\r\n  clock,\r\n  taskElem,\r\n  toolsElem,\r\n  workspaceElem,\r\n  dragControls,\r\n  skybox,\r\n  bar;\r\nvar rabbitRunning = false;\r\nvar rabbitMoving = false;\r\nvar rabbitJumping = false;\r\nvar isTaskOpen = false;\r\nvar isToolsOpen = false;\r\n//SCENE\r\nvar floor, rabbit;\r\nvar objects = [];\r\nvar drops = [];\r\nvar count = 0;\r\nvar carrot = [];\r\n\r\n//SCREEN VARIABLES\r\n\r\nvar HEIGHT,\r\n  WIDTH,\r\n  windowHalfX,\r\n  windowHalfY,\r\n  mousePos = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n//dist = 0;\r\n\r\nfunction init() {\r\n  //INIT THREE JS, SCREEN AND MOUSE EVENTS\r\n  var textureLoader = new THREE.TextureLoader();\r\n  scene = new THREE.Scene();\r\n  scene.background = textureLoader.load(\"../img/bgrabbit.jpg\");\r\n  //scene.fog = new THREE.Fog(0xc1c1f5, 100, 3000);\r\n  HEIGHT = window.innerHeight;\r\n  WIDTH = window.innerWidth;\r\n  aspectRatio = WIDTH / HEIGHT;\r\n  fieldOfView = 60;\r\n  nearPlane = 1;\r\n  farPlane = 3000;\r\n  camera = new THREE.PerspectiveCamera(\r\n    fieldOfView,\r\n    aspectRatio,\r\n    nearPlane,\r\n    farPlane\r\n  );\r\n  camera.position.z = 2000;\r\n  camera.position.y = 250;\r\n  camera.position.x = 0;\r\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n  renderer = new THREE.WebGLRenderer({\r\n    alpha: true,\r\n    antialias: true\r\n  });\r\n  /* можно добавить вторую сцену со второй камерой\r\n   camera2.position.copy( camera.position );\r\ncamera2.position.sub( controls.target );\r\ncamera2.position.setLength( CAM_DISTANCE );\r\ncamera2.lookAt( scene2.position ); */\r\n  clock = new THREE.Clock();\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setSize(WIDTH, HEIGHT);\r\n  renderer.shadowMap.Enabled = true;\r\n  container = document.getElementById(\"world\");\r\n  container.appendChild(renderer.domElement);\r\n  windowHalfX = WIDTH / 2;\r\n  windowHalfY = HEIGHT / 2;\r\n\r\n  controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n  controls.enableDamping = true;\r\n  controls.dampingFactor = 0.15;\r\n  controls.enableZoom = true;\r\n  //controls.autoRotate = true;\r\n\r\n  /* controls = new THREE.TrackballControls(camera, renderer.domElement);\r\n  controls.rotateSpeed = 1.0;\r\n  controls.zoomSpeed = 1.2;\r\n  controls.panSpeed = 0.8;\r\n  controls.noZoom = false;\r\n  controls.noPan = false;\r\n  controls.staticMoving = true;\r\n  controls.dynamicDampingFactor = 0.3; */\r\n  onWindowResize();\r\n  document.addEventListener(\"keydown\", function(e) {\r\n   e = e || window.event;\r\n   if (e.keyCode == '65') {\r\n     turnLeft();\r\n   } else if (e.keyCode == \"83\") {\r\n     rabbitMoving = true;\r\n   } else if (e.keyCode == \"68\") {\r\n     turnRight();\r\n   }\r\n    else if (e.keyCode == \"32\") {\r\n      if (rabbitJumping == true) {\r\n        return;\r\n      }\r\n      else if (rabbitJumping == false) {\r\n        rabbit.jump();\r\n        rabbitJumping = true;\r\n      }\r\n   }\r\n  });\r\n\r\n  document.addEventListener('keyup', function(e) {\r\n    e = e || window.event;\r\n    if (e.keyCode == '83') {\r\n      rabbitMoving = false;\r\n      rabbit.killMove();\r\n      rabbit.nod();\r\n    }\r\n    if (e.keyCode == '32') { \r\n          setTimeout(() =>{\r\n            rabbitJumping = false;\r\n          }, 800);  \r\n    }\r\n  })\r\n\r\n  var showTask = document.getElementById(\"show-task\");\r\n  showTask.addEventListener(\"click\", function() {\r\n    if (isTaskOpen == false) {\r\n      taskElem = document.createElement(\"div\");\r\n      taskElem.className = \"task-сlass\";\r\n      taskElem.id = \"taskid\";\r\n      taskElem.innerHTML =\r\n        \"<h1> Заголовок задания </h1> <p>Описание задания которое необходимо выполнить юному программисту.</p>\";\r\n      tasks.appendChild(taskElem);\r\n    }\r\n    isTaskOpen = true;\r\n  });\r\n\r\n  var closeTask = document.getElementById(\"close-task\");\r\n  closeTask.addEventListener(\"click\", function() {\r\n    if (isTaskOpen == true) {\r\n      tasks.removeChild(taskElem);\r\n    }\r\n    isTaskOpen = false;\r\n  });\r\n\r\n  var beginProgramming = document.getElementById(\"show-tools\");\r\n  beginProgramming.addEventListener(\"click\", function() {\r\n    if (isToolsOpen == false) {\r\n      toolsElem = document.createElement(\"div\");\r\n      toolsElem.className = \"tools-сlass\";\r\n      toolsElem.id = \"toolsid\";\r\n      toolsElem.innerHTML =\r\n        \"<h1> Инструменты </h1> <h3>Действия</h3><h3>Математика</h3><h3>События</h3><h3>Циклы</h3><h3>Условия</h3>\";\r\n      tasks.appendChild(toolsElem);\r\n      workspaceElem = document.createElement(\"div\");\r\n      workspaceElem.className = \"workspace-class\";\r\n      workspaceElem.innerHTML = \"place to recive draggable blocks\";\r\n      tasks.appendChild(workspaceElem);\r\n    }\r\n    isToolsOpen = true;\r\n  });\r\n\r\n  var stopProgramming = document.getElementById(\"close-tools\");\r\n  stopProgramming.addEventListener(\"click\", function() {\r\n    if (isToolsOpen == true) {\r\n      tasks.removeChild(toolsElem);\r\n      tasks.removeChild(workspaceElem);\r\n    }\r\n    isToolsOpen = false;\r\n  });\r\n\r\n  var runTest = document.getElementById(\"run\");\r\n  runTest.addEventListener(\"click\", function() {\r\n    rabbitRunning = !rabbitRunning;\r\n    if (rabbitRunning == false) {\r\n      //setTimeout(rabbit.killMove.bind(rabbit), 2000);\r\n      rabbit.killMove();\r\n      rabbit.nod();\r\n    }\r\n  });\r\n\r\n  var jumpTest = document.getElementById(\"jump\");\r\n  jumpTest.addEventListener(\"click\", function() {\r\n    rabbitJumping = !rabbitJumping;\r\n    rabbit.jump();\r\n  });\r\n\r\n  var moveTest = document.getElementById(\"moveTest\");\r\n  moveTest.addEventListener(\"click\", function() {\r\n    rabbitMoving = !rabbitMoving;\r\n    if (rabbitMoving == true) {\r\n      setTimeout(stopMove, 725);\r\n    }\r\n  });\r\n\r\n  var right = document.getElementById(\"right\");\r\n  right.addEventListener(\"click\", function() {\r\n    turnRight();\r\n  });\r\n\r\n  var left = document.getElementById(\"left\");\r\n  left.addEventListener(\"click\", function() {\r\n    turnLeft();\r\n  });\r\n\r\n  var check = document.getElementById(\"check\");\r\n  check.addEventListener(\"click\", function() {\r\n    /*  console.log(\r\n      rabbit.rabbitMesh.position\r\n        .clone()\r\n        .sub(floor.floorMesh.tree1.treeMesh.position.clone())\r\n    ); */\r\n    console.log(rabbit.rabbitMesh.position);\r\n  });\r\n\r\n  //scene.fog = new THREE.FogExp2(0xffffff, 0.00015);\r\n  // if (rabbitMoving == true) {\r\n  //rabbit.move();\r\n  //rabbit.killNod();\r\n  //}\r\n}\r\n\r\n\r\nfunction createSkybox() {\r\n  skybox = new _skybox__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n  scene.add(skybox.skyboxMesh);\r\n}\r\n\r\nfunction onWindowResize() {\r\n  HEIGHT = window.innerHeight;\r\n  WIDTH = window.innerWidth;\r\n  windowHalfX = WIDTH / 2;\r\n  windowHalfY = HEIGHT / 2;\r\n  renderer.setSize(WIDTH, HEIGHT);\r\n  camera.aspect = WIDTH / HEIGHT;\r\n  camera.updateProjectionMatrix();\r\n}\r\n\r\nfunction createLights() {\r\n  light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.4);\r\n\r\n  shadowLight = new THREE.DirectionalLight(0xffffff, 0.9);\r\n  shadowLight.position.set(200, 200, 200);\r\n  shadowLight.castShadow = true;\r\n  shadowLight.shadow.camera.left = -400;\r\n  shadowLight.shadow.camera.right = 400;\r\n  shadowLight.shadow.camera.top = 400;\r\n  shadowLight.shadow.camera.bottom = -400;\r\n  shadowLight.shadow.camera.near = 1;\r\n  shadowLight.shadow.camera.far = 3000;\r\n\r\n  backLight = new THREE.DirectionalLight(0xffffff, 0.08, 500); //color of light, intensitive of light, distance to source of light\r\n  backLight.position.set(-100, 200, 50);\r\n  backLight.castShadow = true;\r\n\r\n  ambientLight = new THREE.AmbientLight(0xf0f0f0, 0.1);\r\n\r\n  scene.add(backLight);\r\n  scene.add(light);\r\n  scene.add(shadowLight);\r\n  //scene.add(ambientLight);\r\n}\r\n\r\n\r\nfunction createFloor() {\r\n  floor = new _scenefloor__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n  scene.add(floor.floorMesh);\r\n}\r\n\r\n\r\nfunction createCarrot() {\r\n  for (let i = 0; i < 10; i++) {\r\n    carrot[i] = new _carrot__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n    scene.add(carrot[i].carrotMesh);\r\n  }\r\n}\r\n\r\n\r\nfunction createRabbit() {\r\n  rabbit = new _rabbit__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\r\n  scene.add(rabbit.rabbitMesh);\r\n  rabbit.nod();\r\n}\r\n\r\n\r\nfunction createBar() {\r\n  bar = new _bars__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\r\n  scene.add(bar.barMesh);\r\n  objects.push(bar.barMesh);\r\n}\r\n\r\nfunction createDrags() {\r\n  dragControls = new THREE.DragControls(objects, camera, renderer.domElement);\r\n  dragControls.addEventListener(\"dragstart\", function() {\r\n    controls.enabled = false;\r\n  });\r\n  dragControls.addEventListener(\"dragend\", function() {\r\n    controls.enabled = true;\r\n  });\r\n}\r\n\r\nvar Drop = function() {\r\n  this.geometry = new THREE.BoxGeometry(15, 50, 5);\r\n  this.material = new THREE.MeshLambertMaterial({ color: 0x4493d4 });\r\n  this.drop = new THREE.Mesh(this.geometry, this.material);\r\n  this.drop.position.set(\r\n    (Math.random() - 0.5) * 200,\r\n    -50,\r\n    900 + Math.random(1, 50) * 10\r\n  );\r\n  //this.drop.rotation.x = Math.PI/2;\r\n  scene.add(this.drop);\r\n  this.speed = 0;\r\n  this.lifespan = Math.random() * 50 + 50;\r\n\r\n  this.update = function() {\r\n    this.speed += 0.07;\r\n    this.lifespan--;\r\n    this.drop.position.x += (5 - this.drop.position.x) / 70;\r\n    this.drop.position.y -= this.speed;\r\n  };\r\n};\r\n\r\nfunction render() {\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nfunction turnRight() {\r\n  rabbit.rabbitMesh.rotation.y = rabbit.rabbitMesh.rotation.y - Math.PI / 2;\r\n}\r\n\r\nfunction turnLeft() {\r\n  rabbit.rabbitMesh.rotation.y = rabbit.rabbitMesh.rotation.y + Math.PI / 2;\r\n}\r\n\r\nfunction stopMove() {\r\n  rabbitMoving = false;\r\n  rabbit.killMove();\r\n  rabbit.nod();\r\n}\r\n\r\nfunction stopCamRotation() {\r\n  controls.autoRotate = false;\r\n}\r\n\r\nfunction getCarrot(i, x) {\r\n  setTimeout(() => {\r\n    rabbit.jump();\r\n  }, 500);\r\n  carrot[i].carrotMesh.position.set(0 + x, 100, 800);\r\n}\r\n\r\nfunction checkCollision() {\r\n  var rabbCarr1 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[0].carrotMesh.position.clone());\r\n  var rabbCarr2 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[1].carrotMesh.position.clone());\r\n  var rabbCarr3 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[2].carrotMesh.position.clone());\r\n  var rabbCarr4 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[3].carrotMesh.position.clone());\r\n  var rabbCarr5 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[4].carrotMesh.position.clone());\r\n  var rabbCarr6 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[5].carrotMesh.position.clone());\r\n  var rabbCarr7 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[6].carrotMesh.position.clone());\r\n  var rabbCarr8 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[7].carrotMesh.position.clone());\r\n  var rabbCarr9 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[8].carrotMesh.position.clone());\r\n  var rabbCarr10 = rabbit.rabbitMesh.position\r\n    .clone()\r\n    .sub(carrot[9].carrotMesh.position.clone());\r\n\r\n  if (rabbCarr1.length() <= 25) {\r\n    getCarrot(0, 0);\r\n  }\r\n  if (rabbCarr2.length() <= 25) {\r\n    getCarrot(1, 20);\r\n  }\r\n  if (rabbCarr3.length() <= 25) {\r\n    getCarrot(2, 40);\r\n  }\r\n  if (rabbCarr4.length() <= 25) {\r\n    getCarrot(3, 60);\r\n  }\r\n  if (rabbCarr5.length() <= 25) {\r\n    getCarrot(4, 80);\r\n  }\r\n  if (rabbCarr6.length() <= 25) {\r\n    getCarrot(5, 100);\r\n  }\r\n  if (rabbCarr7.length() <= 25) {\r\n    getCarrot(6, 120);\r\n  }\r\n  if (rabbCarr8.length() <= 25) {\r\n    getCarrot(7, 140);\r\n  }\r\n  if (rabbCarr9.length() <= 25) {\r\n    getCarrot(8, 160);\r\n  }\r\n  if (rabbCarr10.length() <= 25) {\r\n    getCarrot(9, 180);\r\n  }\r\n  /*  if (rabbit.rabbitMesh.position == ) {\r\n    alert('stop')\r\n  } */\r\n  var rabbFloor = floor.floorMesh.position\r\n    .clone()\r\n    .sub(rabbit.rabbitMesh.position.clone());\r\n  //console.log(rabbFloor.x);\r\n  //console.log(rabbFloor.z);\r\n  if (\r\n    rabbFloor.x <= -900 ||\r\n    rabbFloor.x >= 900 ||\r\n    rabbFloor.z <= -900 ||\r\n    rabbFloor.z >= 900\r\n  ) {\r\n    rabbit.fall();\r\n  }\r\n}\r\n\r\nfunction loop() {\r\n  if (rabbitMoving == true) {\r\n    checkCollision();\r\n    rabbit.killNod();\r\n    rabbit.move();\r\n  }\r\n  if (rabbitRunning == true) {\r\n    rabbit.killNod();\r\n    rabbit.run();\r\n  }\r\n\r\n  if (controls) controls.update();\r\n\r\n  //CREATE DROPS\r\n  if (count % 3 == 0) {\r\n    for (var i = 0; i < 7; i++) {\r\n      drops.push(new Drop());\r\n    }\r\n  }\r\n  count++;\r\n  for (var i = 0; i < drops.length; i++) {\r\n    drops[i].update();\r\n    if (drops[i].lifespan < 0) {\r\n      scene.remove(scene.getObjectById(drops[i].drop.id));\r\n      drops.splice(i, 1);\r\n    }\r\n  }\r\n  render();\r\n  requestAnimationFrame(loop);\r\n}\r\n\r\ninit();\r\ncreateLights();\r\n//createSkybox();\r\n//createDrags();\r\n//createBar();\r\ncreateFloor();\r\ncreateCarrot();\r\n//console.log(carrot[0].carrotMesh.position.x, carrot[1].carrotMesh.position.x);\r\ncarrot.forEach(carrot => {\r\n  carrot.carrotMesh.position.set(\r\n    170 * Math.random() * 3 + 300,\r\n    -12,\r\n    700 * Math.random() * 1.2 - 300\r\n  );\r\n});\r\n\r\ncreateRabbit();\r\nrabbit.blink();\r\nloop();\r\nwindow.onload = function() {\r\n  controls.autoRotate = true;\r\n  controls.autoRotateSpeed = 2.1;\r\n  camera.position.z = 800;\r\n  TweenMax.to(camera.position, 1.2, {\r\n    z: 100,\r\n    ease: Power0.easeIn\r\n  });\r\n  setTimeout(stopCamRotation, 4700);\r\n  camera.position.z = 1600;\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./js/js_modules/index.js?");

/***/ }),

/***/ "./js/js_modules/rabbit.js":
/*!*********************************!*\
  !*** ./js/js_modules/rabbit.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//RABBIT CONSTRUCTOR\r\nvar Rabbit;\r\nvar clock = new THREE.Clock();\r\nvar delta;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Rabbit = function() {\r\n  this.bodyInitPositions = [];\r\n  this.runningCycle = 0;\r\n\r\n  this.rabbitMesh = new THREE.Group();\r\n  this.bodyMesh = new THREE.Group();\r\n  this.headMesh = new THREE.Group();\r\n\r\n  var bodyMat = new THREE.MeshLambertMaterial({\r\n    color: 0x703f18\r\n  });\r\n\r\n  var tailMat = new THREE.MeshLambertMaterial({\r\n    color: 0x8f8f8f\r\n  });\r\n\r\n  var nouseMat = new THREE.MeshLambertMaterial({\r\n    color: 0xed716d\r\n  });\r\n\r\n  var mouthMat = new THREE.MeshLambertMaterial({\r\n    color: 0xd14747\r\n  });\r\n\r\n  var mustacheMat = new THREE.MeshLambertMaterial({\r\n    color: 0x000000\r\n  });\r\n\r\n  var eyeMat = new THREE.MeshLambertMaterial({\r\n    color: 0xffffff\r\n  });\r\n\r\n  var irisMat = new THREE.MeshLambertMaterial({\r\n    color: 0x301817\r\n  });\r\n\r\n  var pawMat = new THREE.MeshLambertMaterial({\r\n    color: 0x995c5a\r\n  });\r\n\r\n  var bodyGeom = new THREE.BoxGeometry(50, 50, 42, 1);\r\n  var headGeom = new THREE.BoxGeometry(44, 44, 54, 1);\r\n\r\n  var cheekGeom = new THREE.BoxGeometry(20, 20, 5, 1);\r\n\r\n  var earGeom = new THREE.BoxGeometry(5, 60, 10, 1);\r\n  earGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0, 5, 0));\r\n  earGeom.vertices[1].z += -7;\r\n  earGeom.vertices[4].z += -7;\r\n  earGeom.vertices[5].z += +1;\r\n  earGeom.vertices[7].z += +1;\r\n  earGeom.vertices[5].x += -5;\r\n  earGeom.vertices[1].x += +5;\r\n\r\n  var eyeGeom = new THREE.BoxGeometry(20, 20, 8, 1);\r\n  var irisGeom = new THREE.BoxGeometry(8, 8, 8, 1);\r\n\r\n  var mouthGeom = new THREE.BoxGeometry(8, 16, 4, 1);\r\n\r\n  var mustacheGeom = new THREE.BoxGeometry(0.5, 1, 22, 1);\r\n  var spotGeom = new THREE.BoxGeometry(1, 1, 1, 1);\r\n\r\n  var legGeom = new THREE.BoxGeometry(33, 33, 10, 1);\r\n  var pawGeom = new THREE.BoxGeometry(45, 10, 10, 1);\r\n  pawGeom.vertices[2].z -= 1;\r\n  pawGeom.vertices[3].z += 1;\r\n  pawGeom.vertices[4].z -= 3;\r\n  pawGeom.vertices[4].y += 3;\r\n  pawGeom.vertices[5].z += 3;\r\n  pawGeom.vertices[5].y += 3;\r\n  pawGeom.vertices[6].z -= 3;\r\n  pawGeom.vertices[7].z += 3;\r\n  var pawFGeom = new THREE.BoxGeometry(20, 20, 20, 1);\r\n\r\n  var tailGeom = new THREE.BoxGeometry(20, 20, 20, 1);\r\n  tailGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0, -2));\r\n\r\n  var nouseGeom = new THREE.BoxGeometry(20, 20, 15, 1);\r\n\r\n  var tailGeom = new THREE.BoxGeometry(23, 23, 23, 1);\r\n  tailGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0, -2));\r\n\r\n  this.body = new THREE.Mesh(bodyGeom, bodyMat);\r\n  this.bodyMesh.add(this.body);\r\n  this.body.castShadow = true;\r\n\r\n  this.head = new THREE.Mesh(headGeom, bodyMat);\r\n  this.head.position.x = -30;\r\n  this.head.position.y = 30;\r\n  this.head.castShadow = true;\r\n\r\n  this.cheekL = new THREE.Mesh(cheekGeom, tailMat);\r\n  this.cheekL.position.x = -19;\r\n  this.cheekL.position.y = 19;\r\n  this.cheekL.position.z = 28;\r\n\r\n  this.cheekR = this.cheekL.clone();\r\n  this.cheekR.position.z = -this.cheekL.position.z;\r\n\r\n  this.eyeL = new THREE.Mesh(eyeGeom, eyeMat);\r\n  this.eyeL.position.x = -23;\r\n  this.eyeL.position.y = 44;\r\n  this.eyeL.position.z = 25;\r\n\r\n  this.eyeR = this.eyeL.clone();\r\n  this.eyeR.position.z = -this.eyeL.position.z;\r\n\r\n  this.irisL = new THREE.Mesh(irisGeom, irisMat);\r\n  this.irisL.position.x = -25;\r\n  this.irisL.position.y = 40;\r\n  this.irisL.position.z = 26;\r\n\r\n  this.irisR = this.irisL.clone();\r\n  this.irisR.position.z = -this.irisL.position.z;\r\n\r\n  this.nouse = new THREE.Mesh(nouseGeom, nouseMat);\r\n  this.nouse.position.x = -45;\r\n  this.nouse.position.y = 45;\r\n\r\n  this.mouth = new THREE.Mesh(mouthGeom, mouthMat);\r\n  this.mouth.position.x = -50;\r\n  this.mouth.position.y = 17;\r\n\r\n  this.mustacheL1 = new THREE.Mesh(mustacheGeom, mustacheMat);\r\n  this.mustacheL1.position.x = -52;\r\n  this.mustacheL1.position.y = 13;\r\n  this.mustacheL1.position.z = 25;\r\n  this.mustacheL1.rotation.x = +0.1;\r\n\r\n  this.mustacheR1 = this.mustacheL1.clone();\r\n  this.mustacheR1.position.z = -this.mustacheL1.position.z;\r\n  this.mustacheR1.position.y = 23;\r\n\r\n  this.mustacheL2 = new THREE.Mesh(mustacheGeom, mustacheMat);\r\n  this.mustacheL2.position.x = -52;\r\n  this.mustacheL2.position.y = 23;\r\n  this.mustacheL2.position.z = 25;\r\n  this.mustacheL2.rotation.x = -0.1;\r\n\r\n  this.mustacheR2 = this.mustacheL2.clone();\r\n  this.mustacheR2.position.z = -this.mustacheL2.position.z;\r\n  this.mustacheR2.position.y = 13;\r\n\r\n  this.mustacheL3 = new THREE.Mesh(mustacheGeom, mustacheMat);\r\n  this.mustacheL3.position.x = -52;\r\n  this.mustacheL3.position.y = 18;\r\n  this.mustacheL3.position.z = 25;\r\n\r\n  this.mustacheR3 = this.mustacheL3.clone();\r\n  this.mustacheR3.position.z = -this.mustacheL3.position.z;\r\n  this.mustacheR3.position.y = 18;\r\n\r\n  this.spotL1 = new THREE.Mesh(spotGeom, mustacheMat);\r\n  this.spotL1.position.x = -46;\r\n  this.spotL1.position.y = 25;\r\n  this.spotL1.position.z = 27;\r\n\r\n  this.spotR1 = this.spotL1.clone();\r\n  this.spotR1.position.z = -this.spotL1.position.z;\r\n\r\n  this.spotL2 = new THREE.Mesh(spotGeom, mustacheMat);\r\n  this.spotL2.position.x = -42;\r\n  this.spotL2.position.y = 22;\r\n  this.spotL2.position.z = 27;\r\n\r\n  this.spotR2 = this.spotL2.clone();\r\n  this.spotR2.position.z = -this.spotL2.position.z;\r\n\r\n  this.spotL3 = new THREE.Mesh(spotGeom, mustacheMat);\r\n  this.spotL3.position.x = -48;\r\n  this.spotL3.position.y = 18;\r\n  this.spotL3.position.z = 27;\r\n\r\n  this.spotR3 = this.spotL3.clone();\r\n  this.spotR3.position.z = -this.spotL3.position.z;\r\n\r\n  this.earR = new THREE.Mesh(earGeom, pawMat);\r\n  this.earR.position.x = -9;\r\n  this.earR.position.y = 72;\r\n  this.earR.position.z = -13;\r\n  this.earR.rotation.z = -0.1;\r\n\r\n  this.earL = this.earR.clone();\r\n  this.earL.position.z = -this.earR.position.z;\r\n  this.earL.position.x = -19;\r\n  this.earL.rotation.y = Math.PI;\r\n  this.earL.rotation.z = -0.4;\r\n\r\n  this.legL = new THREE.Mesh(legGeom, pawMat);\r\n  this.legL.position.x = 14;\r\n  this.legL.position.z = 25;\r\n  this.legL.position.y = -2;\r\n\r\n  this.legR = new THREE.Mesh(legGeom, pawMat);\r\n  this.legR = this.legL.clone();\r\n  this.legR.position.z = -this.legL.position.z;\r\n\r\n  this.pawBL = new THREE.Mesh(pawGeom, pawMat);\r\n  this.pawBL.position.x = 5;\r\n  this.pawBL.position.y = -27;\r\n  this.pawBL.position.z = 25;\r\n  this.pawBL.rotation.z = 0.1;\r\n\r\n  this.pawBR = new THREE.Mesh(pawGeom, pawMat);\r\n  this.pawBR = this.pawBL.clone();\r\n  this.pawBR.position.z = -this.pawBL.position.z;\r\n\r\n  this.pawFL = new THREE.Mesh(pawFGeom, pawMat);\r\n  this.pawFL.position.x = -30;\r\n  this.pawFL.position.y = -7;\r\n  this.pawFL.position.z = 25;\r\n\r\n  this.pawFR = new THREE.Mesh(pawFGeom, pawMat);\r\n  this.pawFR = this.pawFL.clone();\r\n  this.pawFR.position.z = -this.pawFL.position.z;\r\n\r\n  this.tail = new THREE.Mesh(tailGeom, tailMat);\r\n  this.tail.position.x = 25;\r\n  this.tail.position.y = 23;\r\n\r\n  this.bodyMesh.add(this.legL);\r\n  this.bodyMesh.add(this.legR);\r\n  this.bodyMesh.add(this.pawBL);\r\n  this.bodyMesh.add(this.pawBR);\r\n  this.bodyMesh.add(this.pawFL);\r\n  this.bodyMesh.add(this.pawFR);\r\n  this.bodyMesh.add(this.tail);\r\n\r\n  this.headMesh.add(this.eyeL);\r\n  this.headMesh.add(this.eyeR);\r\n  this.headMesh.add(this.irisL);\r\n  this.headMesh.add(this.irisR);\r\n  this.headMesh.add(this.mouth);\r\n  this.headMesh.add(this.mustacheL1);\r\n  this.headMesh.add(this.mustacheL2);\r\n  this.headMesh.add(this.mustacheL3);\r\n  this.headMesh.add(this.mustacheR1);\r\n  this.headMesh.add(this.mustacheR2);\r\n  this.headMesh.add(this.mustacheR3);\r\n  this.headMesh.add(this.spotL1);\r\n  this.headMesh.add(this.spotL2);\r\n  this.headMesh.add(this.spotL3);\r\n  this.headMesh.add(this.spotR1);\r\n  this.headMesh.add(this.spotR2);\r\n  this.headMesh.add(this.spotR3);\r\n  this.headMesh.add(this.head);\r\n  this.headMesh.add(this.cheekL);\r\n  this.headMesh.add(this.cheekR);\r\n  this.headMesh.add(this.nouse);\r\n  this.headMesh.add(this.earL);\r\n  this.headMesh.add(this.earR);\r\n\r\n  this.rabbitMesh.add(this.bodyMesh);\r\n  this.rabbitMesh.add(this.headMesh);\r\n  this.rabbitMesh.rotation.y = Math.PI / 2;\r\n  this.rabbitMesh.scale.set(0.5, 0.5, 0.5);\r\n  this.rabbitMesh.position.set(170, 0, 450);\r\n\r\n  Rabbit.prototype.blink = function() {\r\n    var _this = this;\r\n    var sp = 0.5 + Math.random();\r\n    if (Math.random() > 0.2)\r\n      TweenMax.to([this.eyeR.scale, this.eyeL.scale], sp / 8, {\r\n        y: 0,\r\n        ease: Power1.easeInOut,\r\n        yoyo: true,\r\n        repeat: 3\r\n        /*   onComplete: function () {\r\n          _this.blink()\r\n      } */\r\n      });\r\n  };\r\n\r\n  //JUMPING\r\n  Rabbit.prototype.jump = function() {\r\n    // if (this.status == \"jumping\") return;\r\n    //this.status = \"jumping\";\r\n    var _this = this;\r\n    var speed = 10;\r\n    var totalSpeed = 10 / speed;\r\n    var jumpHeight = 150;\r\n\r\n    TweenMax.to(this.earL.rotation, totalSpeed / 2, {\r\n      z: \"+=.3\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n    TweenMax.to(this.earR.rotation, totalSpeed / 2, {\r\n      z: \"-=.3\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n\r\n    TweenMax.to(this.pawFL.rotation, totalSpeed / 2, {\r\n      z: \"-=.7\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n    TweenMax.to(this.pawFR.rotation, totalSpeed / 2, {\r\n      z: \"-=.7\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n    TweenMax.to(this.pawBL.rotation, totalSpeed / 2, {\r\n      z: \"+=.7\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n    TweenMax.to(this.pawBR.rotation, totalSpeed / 2, {\r\n      z: \"+=.7\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n\r\n    TweenMax.to(this.tail.rotation, totalSpeed / 2, {\r\n      z: \"+=1\",\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n\r\n    TweenMax.to(this.mouth.rotation, totalSpeed / 2, {\r\n      z: 0.5,\r\n      ease: Back.easeOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n\r\n    TweenMax.to(this.rabbitMesh.position, totalSpeed / 2, {\r\n      y: jumpHeight,\r\n      ease: Back.easeInOut,\r\n      yoyo: true,\r\n      repeat: 1\r\n    });\r\n  };\r\n\r\n  //NODING\r\n\r\n  Rabbit.prototype.nod = function() {\r\n    var _this = this;\r\n    var sp = 0.5 + Math.random();\r\n\r\n    // HEAD\r\n    var tHeadRotY = -Math.PI / 6 + (Math.random() * Math.PI) / 3;\r\n    TweenMax.to(this.headMesh.rotation, sp, {\r\n      y: tHeadRotY,\r\n      ease: Power4.easeInOut,\r\n      onComplete: function() {\r\n        _this.nod();\r\n      }\r\n    });\r\n\r\n    // EARS\r\n    var tEarLRotZ = (Math.random() * Math.PI) / 8;\r\n    var tEarRRotZ = (Math.random() * Math.PI) / 8;\r\n\r\n    TweenMax.to(this.earL.rotation, sp, {\r\n      z: tEarLRotZ,\r\n      ease: Power4.easeInOut\r\n    });\r\n    TweenMax.to(this.earR.rotation, sp, {\r\n      z: tEarRRotZ,\r\n      ease: Power4.easeInOut\r\n    });\r\n\r\n    // MOUTH\r\n    var tMouthRot = (Math.random() * Math.PI) / 8;\r\n    TweenMax.to(this.mouth.rotation, sp, {\r\n      z: tMouthRot,\r\n      ease: Power1.easeInOut\r\n    });\r\n\r\n    //NOUSE\r\n    TweenMax.to([this.nouse.scale], sp / 8, {\r\n      y: 0.6,\r\n      ease: Elastic.easeInOut,\r\n      yoyo: true,\r\n      repeat: 3\r\n    });\r\n\r\n    //EYES\r\n    if (Math.random() > 0.2)\r\n      TweenMax.to([this.eyeR.scale, this.eyeL.scale], sp / 8, {\r\n        y: 0,\r\n        ease: Power1.easeInOut,\r\n        yoyo: true,\r\n        repeat: 1\r\n      });\r\n  };\r\n\r\n  //RUNNING\r\n\r\n  Rabbit.prototype.run = function() {\r\n    //this.status = \"running\";\r\n    var speed = 6;\r\n    var maxSpeed = 48;\r\n    var s = Math.min(speed, maxSpeed);\r\n    delta = clock.getDelta();\r\n    this.runningCycle += delta * s * 0.7;\r\n    this.runningCycle = this.runningCycle % (Math.PI * 2);\r\n    var t = this.runningCycle;\r\n\r\n    var amp = 4;\r\n    var disp = 0.2;\r\n\r\n    // BODY\r\n    this.rabbitMesh.position.y = 6 + Math.sin(t - Math.PI / 2) * amp;\r\n    this.rabbitMesh.rotation.z = 0.2 + Math.sin(t - Math.PI / 2) * amp * 0.1;\r\n\r\n    this.bodyMesh.rotation.z = Math.sin(t - Math.PI / 2) * amp * 0.1;\r\n    this.bodyMesh.position.y = 7 + Math.sin(t - Math.PI / 2) * amp * 0.5;\r\n\r\n    // MOUTH\r\n    this.mouth.rotation.z = Math.PI / 16 + Math.cos(t) * amp * 0.05;\r\n\r\n    // HEAD\r\n    this.headMesh.position.x = 2 + Math.sin(t - Math.PI / 2) * amp * 0.5;\r\n    this.headMesh.position.y = 8 + Math.cos(t - Math.PI / 2) * amp * 0.7;\r\n    this.headMesh.rotation.z = -0.2 + Math.sin(t + Math.PI) * amp * 0.1;\r\n\r\n    // EARS\r\n    this.earL.rotation.z = Math.cos(-Math.PI / 2 + t) * (amp * 0.2) * 0.3;\r\n    this.earR.rotation.z = Math.cos(-Math.PI / 2 + 0.2 + t) * (amp * 0.3) * 0.3;\r\n    // EYES\r\n    this.eyeR.scale.y = this.eyeL.scale.y =\r\n      0.5 + Math.abs(Math.cos(-Math.PI / 4 + t * 0.5)) * 0.6;\r\n\r\n    // TAIL\r\n    this.tail.rotation.z = Math.cos(Math.PI / 2 + t) * amp * 0.3;\r\n\r\n    // FRONT RIGHT PAW\r\n    this.pawFR.position.y = 1.5 + Math.sin(t) * amp - 15;\r\n    this.pawFR.rotation.z = (Math.cos(t) * Math.PI) / 4;\r\n\r\n    this.pawFR.position.x = 6 - Math.cos(t) * amp * 2 - 40;\r\n\r\n    // FRONT LEFT PAW\r\n\r\n    this.pawFL.position.y = 1.5 + Math.sin(disp + t) * amp - 15;\r\n    this.pawFL.rotation.z = (Math.cos(t) * Math.PI) / 4;\r\n\r\n    this.pawFL.position.x = 6 - Math.cos(disp + t) * amp * 2 - 40;\r\n\r\n    // BACK RIGHT PAW\r\n    this.pawBR.position.y = 1.5 + Math.sin(Math.PI + t) * amp - 30;\r\n    this.pawBR.rotation.z = (Math.cos(t + Math.PI * 1.5) * Math.PI) / 3;\r\n\r\n    this.pawBR.position.x = -Math.cos(Math.PI + t) * amp + 10;\r\n\r\n    // BACK LEFT PAW\r\n    this.pawBL.position.y = 1.5 + Math.sin(Math.PI + t) * amp - 30;\r\n    this.pawBL.rotation.z = (Math.cos(t + Math.PI * 1.5) * Math.PI) / 3;\r\n\r\n    this.pawBL.position.x = -Math.cos(Math.PI + t) * amp + 10;\r\n  };\r\n\r\n  Rabbit.prototype.move = function() {\r\n    //this.status = \"running\";\r\n    var speed = 10;\r\n    var maxSpeed = 48;\r\n    var s = Math.min(speed, maxSpeed);\r\n    delta = clock.getDelta();\r\n    this.runningCycle += delta * s * 0.7;\r\n    this.runningCycle = this.runningCycle % (Math.PI * 2);\r\n    var t = this.runningCycle;\r\n    var step = 1;\r\n    var amp = 4;\r\n    var disp = 0.2;\r\n    var rotAngle = 1.5707963267948966;\r\n    // BODY\r\n    if (\r\n      this.rabbitMesh.rotation.y == rotAngle ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 5 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 9 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 13 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -3 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -7 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -11 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -15\r\n    ) {\r\n      this.rabbitMesh.position.z = this.rabbitMesh.position.z + step; //forward\r\n    } else if (\r\n      this.rabbitMesh.rotation.y == 0 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -4 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -8 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -12 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 4 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 8 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 12 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 16\r\n    ) {\r\n      this.rabbitMesh.position.x = this.rabbitMesh.position.x - step; // to right\r\n    } else if (\r\n      this.rabbitMesh.rotation.y == -rotAngle ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -5 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -9 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -13 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 3 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 7 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 11 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 15\r\n    ) {\r\n      this.rabbitMesh.position.z = this.rabbitMesh.position.z - step; // back\r\n    } else if (\r\n      this.rabbitMesh.rotation.y == rotAngle * -2 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -6 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -10 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * -14 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 2 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 6 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 10 ||\r\n      this.rabbitMesh.rotation.y == rotAngle * 14\r\n    ) {\r\n      this.rabbitMesh.position.x = this.rabbitMesh.position.x + step; //to left\r\n    } else {\r\n      alert(\r\n        \"Вы слишком много крутитесь! У кролика может закружиться голова ;)\"\r\n      );\r\n      this.rabbitMesh.rotation.y = rotAngle;\r\n    }\r\n\r\n    this.rabbitMesh.position.y = 6 + Math.sin(t - Math.PI / 2) * amp;\r\n    this.rabbitMesh.rotation.z = 0.2 + Math.sin(t - Math.PI / 2) * amp * 0.1;\r\n\r\n    this.bodyMesh.rotation.z = Math.sin(t - Math.PI / 2) * amp * 0.1;\r\n    this.bodyMesh.position.y = 7 + Math.sin(t - Math.PI / 2) * amp * 0.5;\r\n\r\n    // MOUTH\r\n    //this.mouth.rotation.z = Math.PI / 16 + Math.cos(t) * amp * 0.05;\r\n\r\n    // HEAD\r\n    this.headMesh.position.x = 2 + Math.sin(t - Math.PI / 2) * amp * 0.5;\r\n    this.headMesh.position.y = 8 + Math.cos(t - Math.PI / 2) * amp * 0.7;\r\n    this.headMesh.rotation.z = -0.2 + Math.sin(t + Math.PI) * amp * 0.1;\r\n\r\n    // EARS\r\n    this.earL.rotation.z = Math.cos(-Math.PI / 2 + t) * (amp * 0.2) * 0.3;\r\n    this.earR.rotation.z = Math.cos(-Math.PI / 2 + 0.2 + t) * (amp * 0.3) * 0.3;\r\n    // EYES\r\n    this.eyeR.scale.y = this.eyeL.scale.y =\r\n      0.5 + Math.abs(Math.cos(-Math.PI / 4 + t * 0.5)) * 0.6;\r\n\r\n    // TAIL\r\n    this.tail.rotation.z = Math.cos(Math.PI / 2 + t) * amp * 0.3;\r\n\r\n    // FRONT RIGHT PAW\r\n    this.pawFR.position.y = 1.5 + Math.sin(t) * amp - 15;\r\n    this.pawFR.rotation.z = (Math.cos(t) * Math.PI) / 4;\r\n\r\n    this.pawFR.position.x = 6 - Math.cos(t) * amp * 2 - 40;\r\n\r\n    // FRONT LEFT PAW\r\n\r\n    this.pawFL.position.y = 1.5 + Math.sin(disp + t) * amp - 15;\r\n    this.pawFL.rotation.z = (Math.cos(t) * Math.PI) / 4;\r\n\r\n    this.pawFL.position.x = 6 - Math.cos(disp + t) * amp * 2 - 40;\r\n\r\n    // BACK RIGHT PAW\r\n    this.pawBR.position.y = 1.5 + Math.sin(Math.PI + t) * amp - 30;\r\n    this.pawBR.rotation.z = (Math.cos(t + Math.PI * 1.5) * Math.PI) / 3;\r\n\r\n    this.pawBR.position.x = -Math.cos(Math.PI + t) * amp + 10;\r\n\r\n    // BACK LEFT PAW\r\n    this.pawBL.position.y = 1.5 + Math.sin(Math.PI + t) * amp - 30;\r\n    this.pawBL.rotation.z = (Math.cos(t + Math.PI * 1.5) * Math.PI) / 3;\r\n\r\n    this.pawBL.position.x = -Math.cos(Math.PI + t) * amp + 10;\r\n  };\r\n\r\n  Rabbit.prototype.fall = function() {\r\n    TweenMax.to([this.rabbitMesh.position], 4, {\r\n      y: -700,\r\n      ease: Power0.easeInOut\r\n    });\r\n  };\r\n\r\n  Rabbit.prototype.killNod = function() {\r\n    TweenMax.killTweensOf(this.headMesh.rotation);\r\n    TweenMax.killTweensOf(this.earL.rotation);\r\n    TweenMax.killTweensOf(this.earR.rotation);\r\n    TweenMax.killTweensOf(this.mouth.rotation);\r\n    TweenMax.killTweensOf(this.mouth.rotation);\r\n    TweenMax.killTweensOf(this.nouse.scale);\r\n    TweenMax.killTweensOf([this.eyeR.scale, this.eyeL.scale]);\r\n    this.headMesh.rotation.set(0, 0, 0);\r\n  };\r\n\r\n  Rabbit.prototype.killJump = function() {\r\n    TweenMax.killTweensOf([this.earL.rotation, this.earR.rotation]);\r\n    TweenMax.killTweensOf([this.pawFL.rotation, this.pawFR.rotation]);\r\n    TweenMax.killTweensOf([this.pawBL.rotation, this.pawBR.rotation]);\r\n    TweenMax.killTweensOf([this.tail.rotation, this.mouth.rotation]);\r\n    TweenMax.killTweensOf(this.rabbitMesh.position);\r\n  };\r\n\r\n  Rabbit.prototype.killMove = function() {\r\n    this.rabbitMesh.position.y = 0;\r\n    this.rabbitMesh.rotation.z = Math.PI * 2;\r\n\r\n    this.bodyMesh.rotation.z = Math.PI * 2;\r\n    this.bodyMesh.position.y = this.bodyMesh.position.y;\r\n    //this.mouth.rotation.z = Math.PI * 2;\r\n\r\n    this.headMesh.rotation.z = Math.PI * 2;\r\n    this.headMesh.position.x;\r\n    this.headMesh.position.y;\r\n    this.earL.rotation.z = -0.4;\r\n    this.earR.rotation.z = -0.1;\r\n    // EYES\r\n    this.eyeR.scale.y = 1;\r\n    this.eyeL.scale.y = 1;\r\n\r\n    // TAIL\r\n    this.tail.rotation.z = Math.PI * 2;\r\n\r\n    // FRONT RIGHT PAW\r\n    this.pawFR.position.y = -7;\r\n    this.pawFR.rotation.z = Math.PI * 2;\r\n\r\n    this.pawFR.position.x = -30;\r\n\r\n    // FRONT LEFT PAW\r\n\r\n    this.pawFL.position.y = -7;\r\n    this.pawFL.rotation.z = Math.PI * 2;\r\n\r\n    this.pawFL.position.x = -30;\r\n\r\n    // BACK RIGHT PAW\r\n    this.pawBR.position.y = -27;\r\n    this.pawBR.rotation.z = 0.1;\r\n\r\n    this.pawBR.position.x = 5;\r\n\r\n    // BACK LEFT PAW\r\n    this.pawBL.position.y = -27;\r\n    this.pawBL.rotation.z = 0.1;\r\n\r\n    this.pawBL.position.x = 5;\r\n  };\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/rabbit.js?");

/***/ }),

/***/ "./js/js_modules/scenefloor.js":
/*!*************************************!*\
  !*** ./js/js_modules/scenefloor.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree */ \"./js/js_modules/tree.js\");\n/* harmony import */ var _bridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bridge */ \"./js/js_modules/bridge.js\");\nvar Floor;\r\n\r\n\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Floor = function() {\r\n  this.floorMesh = new THREE.Group();\r\n\r\n  // LEFT FIELD\r\n  var leftFieldMat = new THREE.MeshLambertMaterial({\r\n    color: 0x75bd2d,    //abd66a,\r\n    side: THREE.DoubleSide\r\n  });\r\n  var leftFieldGeom = new THREE.BoxGeometry(800, 30, 1800);\r\n  this.leftFieldMesh = new THREE.Mesh(leftFieldGeom, leftFieldMat);\r\n  this.leftFieldMesh.receiveShadow = true;\r\n  this.leftFieldMesh.position.set(-500, -30, 0);\r\n\r\n  // RIGHT FIELD\r\n  this.rightFieldMesh = this.leftFieldMesh.clone();\r\n  this.rightFieldMesh.receiveShadow = true;\r\n  this.rightFieldMesh.position.set(500, -30, 0);\r\n\r\n  //BOTTOM FIELD\r\n  var bottomFieldGeom = new THREE.BoxGeometry(1500, 120, 1500);\r\n  this.bottomFieldMesh = new THREE.Mesh(bottomFieldGeom, leftFieldMat);\r\n  this.bottomFieldMesh.receiveShadow = true;\r\n  this.bottomFieldMesh.position.set(0, -180, 0);\r\n  //this.bottomFieldMesh.rotation.y = .3;\r\n\r\n  var bottom1FieldGeom = new THREE.BoxGeometry(1300, 180, 1300);\r\n  this.bottom1FieldMesh = new THREE.Mesh(bottom1FieldGeom, leftFieldMat);\r\n  this.bottom1FieldMesh.receiveShadow = true;\r\n  this.bottom1FieldMesh.position.set(0, -380, 0);\r\n  //this.bottom1FieldMesh.rotation.y = -0.3;\r\n\r\n  var bottom2FieldGeom = new THREE.BoxGeometry(800, 280, 800);\r\n  this.bottom2FieldMesh = new THREE.Mesh(bottom2FieldGeom, leftFieldMat);\r\n  this.bottom2FieldMesh.receiveShadow = true;\r\n  this.bottom2FieldMesh.position.set(0, -680, 0);\r\n\r\n/*     var fieldMat = new THREE.MeshLambertMaterial({\r\n      color: 0x2b6909,\r\n      side: THREE.DoubleSide\r\n    });\r\n\r\n  var bottom3FieldGeom = new THREE.BoxGeometry(5800, 30, 5800);\r\n  this.bottom3FieldMesh = new THREE.Mesh(bottom3FieldGeom, fieldMat);\r\n  this.bottom3FieldMesh.receiveShadow = true;\r\n  this.bottom3FieldMesh.position.set(0, -780, 0); */\r\n\r\n  //STREAMGROUND\r\n  var strGroundMat = new THREE.MeshLambertMaterial({\r\n    color: 0xabd66a,\r\n    side: THREE.DoubleSide\r\n  });\r\n  var strCroundGeom = new THREE.BoxGeometry(205, 10, 1800);\r\n  this.strGroundMesh = new THREE.Mesh(strCroundGeom, strGroundMat);\r\n  this.strGroundMesh.position.set(0, -40, 0);\r\n\r\n  // STREAM\r\n  var streamMat = new THREE.MeshLambertMaterial({\r\n    color: 0x4493d4,\r\n    side: THREE.DoubleSide\r\n  });\r\n  var streamGeom = new THREE.BoxGeometry(200, 16, 1800);\r\n  this.streamMesh = new THREE.Mesh(streamGeom, streamMat);\r\n  //this.streamMesh.receiveShadow = true;\r\n  this.streamMesh.position.set(0, -32, 0);\r\n\r\n  //TREES\r\n  var tree1 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-100, 0, -100);\r\n  var tree2 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-150, 0, -180);\r\n  var tree3 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-100, 0, -220);\r\n  var tree4 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-400, 0, -400);\r\n  var tree5 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-878, 0, -878);\r\n  var tree6 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-810, 0, -810);\r\n  var tree7 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-740, 0, -870);\r\n  var tree8 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](888, 0, -680);\r\n  var tree9 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-880, 0, 680);\r\n  var tree10 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-320, 0, 240);\r\n  var tree11 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-630, 0, 130);\r\n  var tree12 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-480, 0, 480);\r\n\r\n  var tree13 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](100, 0, 100);\r\n  var tree14 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](150, 0, 180);\r\n  var tree15 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](100, 0, 220);\r\n  var tree16 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](400, 0, 400);\r\n  var tree17 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](880, 0, 830);\r\n  var tree18 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](810, 0, 740);\r\n  var tree19 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](740, 0, 820);\r\n  var tree20 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](888, 0, 680);\r\n  var tree21 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](878, 0, -680);\r\n  var tree22 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](320, 0, -240);\r\n  var tree23 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](630, 0, -130);\r\n  var tree24 = new _tree__WEBPACK_IMPORTED_MODULE_0__[\"default\"](480, 0, -480);\r\n\r\n  //BRIDGE\r\n  this.bridge = new _bridge__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n\r\n  //FLOR\r\n  this.floorMesh.add(this.leftFieldMesh);\r\n  this.floorMesh.add(this.rightFieldMesh);\r\n  this.floorMesh.add(this.bottomFieldMesh);\r\n  this.floorMesh.add(this.bottom1FieldMesh);\r\n  this.floorMesh.add(this.bottom2FieldMesh);\r\n  //this.floorMesh.add(this.bottom3FieldMesh);\r\n  this.floorMesh.add(this.streamMesh);\r\n  this.floorMesh.add(this.strGroundMesh);\r\n  this.floorMesh.add(this.bridge.bridgeMesh);\r\n\r\n  this.floorMesh.add(tree1.treeMesh);\r\n  this.floorMesh.add(tree2.treeMesh);\r\n  this.floorMesh.add(tree3.treeMesh);\r\n  this.floorMesh.add(tree4.treeMesh);\r\n  this.floorMesh.add(tree5.treeMesh);\r\n  this.floorMesh.add(tree6.treeMesh);\r\n  this.floorMesh.add(tree7.treeMesh);\r\n  this.floorMesh.add(tree8.treeMesh);\r\n  this.floorMesh.add(tree9.treeMesh);\r\n  this.floorMesh.add(tree10.treeMesh);\r\n  this.floorMesh.add(tree11.treeMesh);\r\n  this.floorMesh.add(tree12.treeMesh);\r\n  this.floorMesh.add(tree13.treeMesh);\r\n  this.floorMesh.add(tree14.treeMesh);\r\n  this.floorMesh.add(tree15.treeMesh);\r\n  this.floorMesh.add(tree16.treeMesh);\r\n  this.floorMesh.add(tree17.treeMesh);\r\n  this.floorMesh.add(tree18.treeMesh);\r\n  this.floorMesh.add(tree19.treeMesh);\r\n  this.floorMesh.add(tree20.treeMesh);\r\n  this.floorMesh.add(tree21.treeMesh);\r\n  this.floorMesh.add(tree22.treeMesh);\r\n  this.floorMesh.add(tree23.treeMesh);\r\n  this.floorMesh.add(tree24.treeMesh);\r\n  this.floorMesh.receiveShadow = true;\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/scenefloor.js?");

/***/ }),

/***/ "./js/js_modules/skybox.js":
/*!*********************************!*\
  !*** ./js/js_modules/skybox.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Skybox;\r\nvar lights = [];\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Skybox = function() {\r\n  //var textureLoader = new THREE.TextureLoader();\r\n  var skycubeGeom = new THREE.CubeGeometry(3500, 3500, 3500);\r\n  var skycubeSideMat = [\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_rt.png\"),\r\n      side: THREE.DoubleSide\r\n    }),\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_lf.png\"),\r\n      side: THREE.DoubleSide\r\n    }),\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_up.png\"),\r\n      side: THREE.DoubleSide\r\n    }),\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_dn.png\"),\r\n      side: THREE.DoubleSide\r\n    }),\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_ft.png\"),\r\n      side: THREE.DoubleSide\r\n    }),\r\n    new THREE.MeshBasicMaterial({\r\n      map: new THREE.TextureLoader().load(\"../img/st_bk.png\"),\r\n      side: THREE.DoubleSide\r\n    })\r\n  ];\r\n  var skyboxMat = new THREE.MeshFaceMaterial(skycubeSideMat);\r\n  this.skyboxMesh = new THREE.Mesh(skycubeGeom, skyboxMat);\r\n  this.skyboxMesh.position.set(0, 700, 450);\r\n\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/skybox.js?");

/***/ }),

/***/ "./js/js_modules/tree.js":
/*!*******************************!*\
  !*** ./js/js_modules/tree.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar Tree;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tree = function(x, y, z) {\r\n  this.x = x;\r\n  this.y = y;\r\n  this.z = z;\r\n  //TREES\r\n  this.treeMesh = new THREE.Group();\r\n  //TRUNK\r\n  var trunkMat = new THREE.MeshLambertMaterial({ color: 0x542609, side: THREE.DoubleSide });\r\n  var trunkGeom = new THREE.BoxGeometry(20, 200, 20);\r\n  this.trunkMesh = new THREE.Mesh(trunkGeom, trunkMat);\r\n  this.trunkMesh.position.set(0, 58, 0);\r\n  this.trunkMesh.castShadow = true;\r\n  this.trunkMesh.receiveShadow = true;\r\n\r\n  //LEAVES\r\n  var leavesMat = new THREE.MeshLambertMaterial({\r\n    color: 0x016316,\r\n    side: THREE.DoubleSide\r\n  });\r\n  var leavesGeom = new THREE.BoxGeometry(44, 460, 44);\r\n  this.leavesMesh = new THREE.Mesh(leavesGeom, leavesMat);\r\n  this.leavesMesh.position.set(0, 370, 0);\r\n  this.leavesMesh.castShadow = true;\r\n\r\n  this.treeMesh.add(this.trunkMesh);\r\n  this.treeMesh.add(this.leavesMesh);\r\n  this.treeMesh.castShadow = true;\r\n  this.treeMesh.position.set(this.x, this.y, this.z);\r\n\r\n});\r\n\n\n//# sourceURL=webpack:///./js/js_modules/tree.js?");

/***/ })

/******/ });